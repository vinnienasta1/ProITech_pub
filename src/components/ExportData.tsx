import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Box,
  Typography,
  Chip,
  FormControlLabel,
  Checkbox,
  Alert,
  LinearProgress,
  IconButton,
} from '@mui/material';
import {
  FileDownload as DownloadIcon,
  Close as CloseIcon,
  CheckCircle as SuccessIcon,
} from '@mui/icons-material';

export interface ExportOptions {
  format: 'csv' | 'excel' | 'pdf' | 'json';
  includeFields: string[];
  dateRange: {
    start: string;
    end: string;
  };
  filters: {
    category?: string;
    status?: string;
    location?: string;
  };
}

interface ExportDataProps {
  open: boolean;
  onClose: () => void;
  onExport: (options: ExportOptions) => Promise<void>;
  availableFields: string[];
  types: string[];
  statuses: string[];
  locations: string[];
}

const ExportData: React.FC<ExportDataProps> = ({
  open,
  onClose,
  onExport,
  availableFields,
  types,
  statuses,
  locations,
}) => {
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: 'csv',
    includeFields: availableFields,
    dateRange: {
      start: '',
      end: '',
    },
    filters: {},
  });

  const [isExporting, setIsExporting] = useState(false);
  const [exportSuccess, setExportSuccess] = useState(false);

  const formatOptions = [
    { value: 'csv', label: 'CSV —Ñ–∞–π–ª', description: '–î–ª—è Excel –∏ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤' },
    { value: 'excel', label: 'Excel —Ñ–∞–π–ª', description: '–ù–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Microsoft Excel' },
    { value: 'pdf', label: 'PDF –æ—Ç—á–µ—Ç', description: '–î–ª—è –ø–µ—á–∞—Ç–∏ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è' },
    { value: 'json', label: 'JSON —Ñ–∞–π–ª', description: '–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏' },
  ];

  const handleFieldToggle = (field: string) => {
    setExportOptions(prev => ({
      ...prev,
      includeFields: prev.includeFields.includes(field)
        ? prev.includeFields.filter(f => f !== field)
        : [...prev.includeFields, field],
    }));
  };

  const handleFilterChange = (filterType: keyof ExportOptions['filters'], value: string) => {
    setExportOptions(prev => ({
      ...prev,
      filters: {
        ...prev.filters,
        [filterType]: value || undefined,
      },
    }));
  };

  const handleExport = async () => {
    setIsExporting(true);
    setExportSuccess(false);
    
    try {
      await onExport(exportOptions);
      setExportSuccess(true);
      setTimeout(() => {
        onClose();
        setExportSuccess(false);
      }, 2000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const getFormatIcon = (format: string) => {
    switch (format) {
      case 'csv':
        return 'üìä';
      case 'excel':
        return 'üìà';
      case 'pdf':
        return 'üìÑ';
      case 'json':
        return 'üîß';
      default:
        return 'üìÅ';
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </Typography>
          <IconButton onClick={onClose} size="small">
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        {exportSuccess && (
          <Alert
            icon={<SuccessIcon />}
            severity="success"
            sx={{ mb: 2 }}
          >
            –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.
          </Alert>
        )}

        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3 }}>
          {/* –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
          <Box sx={{ flex: '1 1 300px', minWidth: 0 }}>
            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
              –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            </Typography>
            <FormControl fullWidth>
              <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç</InputLabel>
              <Select
                value={exportOptions.format}
                onChange={(e) => setExportOptions(prev => ({ ...prev, format: e.target.value as any }))}
                label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç"
              >
                {formatOptions.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography sx={{ mr: 1, fontSize: '1.2em' }}>
                        {getFormatIcon(option.value)}
                      </Typography>
                      <Box>
                        <Typography variant="body2" sx={{ fontWeight: 500 }}>
                          {option.label}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {option.description}
                        </Typography>
                      </Box>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>

          {/* –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç */}
          <Box sx={{ flex: '1 1 300px', minWidth: 0 }}>
            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
              –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            </Typography>
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Box sx={{ flex: '1 1 50%' }}>
                <TextField
                  fullWidth
                  label="–° –¥–∞—Ç—ã"
                  type="date"
                  value={exportOptions.dateRange.start}
                  onChange={(e) => setExportOptions(prev => ({
                    ...prev,
                    dateRange: { ...prev.dateRange, start: e.target.value }
                  }))}
                  InputLabelProps={{ shrink: true }}
                />
              </Box>
              <Box sx={{ flex: '1 1 50%' }}>
                <TextField
                  fullWidth
                  label="–ü–æ –¥–∞—Ç—É"
                  type="date"
                  value={exportOptions.dateRange.end}
                  onChange={(e) => setExportOptions(prev => ({
                    ...prev,
                    dateRange: { ...prev.dateRange, end: e.target.value }
                  }))}
                  InputLabelProps={{ shrink: true }}
                />
              </Box>
            </Box>
          </Box>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <Box sx={{ flex: '1 1 100%', minWidth: 0 }}>
            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
              –§–∏–ª—å—Ç—Ä—ã
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
              <Box sx={{ flex: '1 1 250px', minWidth: 0 }}>
                <FormControl fullWidth>
                  <InputLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
                  <Select
                    value={exportOptions.filters.category || ''}
                    onChange={(e) => handleFilterChange('category', e.target.value)}
                    label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                  >
                    <MenuItem value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</MenuItem>
                    {types.map((type) => (
                      <MenuItem key={type} value={type}>
                        {type}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>
              <Box sx={{ flex: '1 1 250px', minWidth: 0 }}>
                <FormControl fullWidth>
                  <InputLabel>–°—Ç–∞—Ç—É—Å</InputLabel>
                  <Select
                    value={exportOptions.filters.status || ''}
                    onChange={(e) => handleFilterChange('status', e.target.value)}
                    label="–°—Ç–∞—Ç—É—Å"
                  >
                    <MenuItem value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                    {statuses.map((status) => (
                      <MenuItem key={status} value={status}>
                        {status}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>
              <Box sx={{ flex: '1 1 250px', minWidth: 0 }}>
                <FormControl fullWidth>
                  <InputLabel>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</InputLabel>
                  <Select
                    value={exportOptions.filters.location || ''}
                    onChange={(e) => handleFilterChange('location', e.target.value)}
                    label="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                  >
                    <MenuItem value="">–í—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</MenuItem>
                    {locations.map((location) => (
                      <MenuItem key={location} value={location}>
                        {location}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>
            </Box>
          </Box>

          {/* –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
          <Box sx={{ flex: '1 1 100%', minWidth: 0 }}>
            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
              –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {availableFields.map((field) => (
                <Chip
                  key={field}
                  label={field}
                  clickable
                  color={exportOptions.includeFields.includes(field) ? 'primary' : 'default'}
                  variant={exportOptions.includeFields.includes(field) ? 'filled' : 'outlined'}
                  onClick={() => handleFieldToggle(field)}
                  sx={{ mb: 1 }}
                />
              ))}
            </Box>
            <FormControlLabel
              control={
                <Checkbox
                  checked={exportOptions.includeFields.length === availableFields.length}
                  indeterminate={exportOptions.includeFields.length > 0 && exportOptions.includeFields.length < availableFields.length}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setExportOptions(prev => ({ ...prev, includeFields: availableFields }));
                    } else {
                      setExportOptions(prev => ({ ...prev, includeFields: [] }));
                    }
                  }}
                />
              }
              label="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–æ–ª—è"
            />
          </Box>
        </Box>

        {isExporting && (
          <Box sx={{ mt: 2 }}>
            <LinearProgress />
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.
            </Typography>
          </Box>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} disabled={isExporting}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          onClick={handleExport}
          variant="contained"
          startIcon={<DownloadIcon />}
          disabled={isExporting || exportOptions.includeFields.length === 0}
        >
          {isExporting ? '–≠–∫—Å–ø–æ—Ä—Ç...' : '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ExportData;
