/**
 * üö® –í–ê–ñ–ù–û: –õ–û–ì–ò–ö–ê –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–ò - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ë–ï–ó –¢–©–ê–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
 * 1. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–≤–æ–¥–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
 * 2. –î—É–±–ª–∏–∫–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * 3. –ë—É—Ñ–µ—Ä –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 * 4. –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –ò –±—É—Ñ–µ—Ä, –ò –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ equipmentStorage
 * 
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•:
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ë–ï–ó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø):
 * - addSerial: –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * - handleSelectEquipment: –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
 * - handleBulkOperation: –ª–æ–≥–∏–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - searchEquipmentByNumbers: –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * - useEffect –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞
 * 
 * –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –õ–Æ–ë–û–ô –ò–ó –≠–¢–ò–• –§–£–ù–ö–¶–ò–ô –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
 * 1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã
 * 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
 * 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * 5. –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Typography, 
  Paper, 
  TextField, 
  Button, 
  IconButton, 
  Chip, 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions, 
  List,
  ListItem,
  ListItemText,
  ListItemButton,
  Checkbox,
  ListItemIcon,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  QrCode as QrCodeIcon,
  Clear as ClearIcon,
  FileDownload as ExportIcon,
  Settings as ActionsIcon,
  ViewColumn as ViewColumnIcon,
} from '@mui/icons-material';
import { getEquipment } from '../storage/equipmentStorage';
import { getEntities } from '../storage/entitiesStorage';
import { getStatuses } from '../storage/statusStorage';
import { getInventoryBuffer, clearInventoryBuffer, saveInventoryBuffer } from '../storage/inventoryBufferStorage';
import BulkOperations from '../components/BulkOperations';
import { useActionLog } from '../contexts/ActionLogContext';

interface FoundItem {
  id: string;
  inventoryNumber: string;
  name: string;
  type: string;
  department: string;
  status: string;
  location?: string;
  user?: string;
  comment?: string;
  serialNumber?: string;
  manufacturer?: string;
  model?: string;
  purchaseDate?: string;
  cost?: number;
  warrantyMonths?: number;
  supplier?: string;
  project?: string;
  invoiceNumber?: string;
  contractNumber?: string;
  rack?: string;
}

interface BufferRow {
  id: string;
  serial: string;
  status: 'found' | 'not_found' | 'duplicate';
  item?: FoundItem;
}

const Inventory: React.FC = () => {
  const navigate = useNavigate();
  const { addAction, registerUndoHandler, unregisterUndoHandler } = useActionLog();
  
  const [inputValue, setInputValue] = useState('');
  const [rows, setRows] = useState<BufferRow[]>([]);
  const [bulkOperationsOpen, setBulkOperationsOpen] = useState(false);
  const [columnsDialogOpen, setColumnsDialogOpen] = useState(false);
  const [selectionDialog, setSelectionDialog] = useState<{
    open: boolean;
    items: FoundItem[];
    searchTerm: string;
  }>({
    open: false,
    items: [],
    searchTerm: '',
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
  const [visibleColumns, setVisibleColumns] = useState(() => {
    const saved = localStorage.getItem('inventory_visible_columns');
    return saved ? JSON.parse(saved) : {
      inventoryNumber: true,
      department: true,
      name: true,
      status: true,
      location: true,
      user: true,
      type: true,
      manufacturer: true,
      model: true,
      serialNumber: true,
      comment: true
    };
  });
  
  // –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è Drag and Drop
  const [columnOrder, setColumnOrder] = useState(() => {
    const saved = localStorage.getItem('inventory_column_order');
    return saved ? JSON.parse(saved) : [
      'inventoryNumber',
      'department', 
      'name',
      'status',
      'location',
      'user',
      'type',
      'manufacturer',
      'model',
      'serialNumber',
      'comment'
    ];
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Drag and Drop
  const [isDragging, setIsDragging] = useState(false);
  const [draggedColumn, setDraggedColumn] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
  const [statusColorsKey, setStatusColorsKey] = useState(0);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Drag and Drop
  const handleDragStart = (e: React.DragEvent, columnKey: string) => {
    setIsDragging(true);
    setDraggedColumn(columnKey);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent, targetColumn: string) => {
    e.preventDefault();
    if (draggedColumn && draggedColumn !== targetColumn) {
      const newOrder = [...columnOrder];
      const draggedIndex = newOrder.indexOf(draggedColumn);
      const targetIndex = newOrder.indexOf(targetColumn);
      
      newOrder.splice(draggedIndex, 1);
      newOrder.splice(targetIndex, 0, draggedColumn);
      
      setColumnOrder(newOrder);
      localStorage.setItem('inventory_column_order', JSON.stringify(newOrder));
    }
    setIsDragging(false);
    setDraggedColumn(null);
  };

  const handleDragEnd = () => {
    setIsDragging(false);
    setDraggedColumn(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const handleColumnVisibilityChange = (key: string, value: boolean) => {
    const newVisibleColumns = { ...visibleColumns, [key]: value };
    setVisibleColumns(newVisibleColumns);
    localStorage.setItem('inventory_visible_columns', JSON.stringify(newVisibleColumns));
  };

  // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const orderedVisibleColumns = columnOrder.filter((key: string) => visibleColumns[key as keyof typeof visibleColumns]);

  const equipment = getEquipment();
  const entities = getEntities();
  const statuses = getStatuses();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MUI
  const getStatusColor = useCallback((status: string) => {
    const statusInfo = statuses.find((s: any) => s.name === status);
    if (statusInfo) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hex —Ü–≤–µ—Ç –≤ MUI —Ü–≤–µ—Ç
      const color = statusInfo.color;
      if (color === '#4caf50') return 'success';
      if (color === '#ff9800') return 'warning';
      if (color === '#f44336') return 'error';
      if (color === '#2196f3') return 'info';
      if (color === '#9c27b0') return 'secondary';
    }
    return 'default';
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [statuses, statusColorsKey]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç statusColorsKey

  // useEffect –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
  useEffect(() => {
    const checkStatusUpdates = () => {
      setStatusColorsKey(prev => prev + 1);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkStatusUpdates, 5000);

    return () => clearInterval(interval);
  }, []);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô useEffect: –ó–∞–≥—Ä—É–∑–∫–∞ –±—É—Ñ–µ—Ä–∞
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   * 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
   * 3. –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏!
   */
  useEffect(() => {
    const bufferData = getInventoryBuffer();
    if (bufferData.length > 0) {
      setRows(bufferData);
    }
  }, []);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô useEffect: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –±—É—Ñ–µ—Ä –≤ localStorage –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   * 2. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
   * 3. –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!
   */
  useEffect(() => {
    if (rows.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ localStorage
      saveInventoryBuffer(rows);
    }
  }, [rows]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: searchEquipmentByNumbers
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ò—â–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
   * 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫ (—É–±–∏—Ä–∞–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
   * 3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –≤—ã–±–æ—Ä–∞
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ü–û–ò–°–ö–ê –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const searchEquipmentByNumbers = useCallback((searchTerm: string): FoundItem[] => {
    if (!searchTerm.trim()) return [];

    const normalizedSearch = searchTerm.replace(/^0+/, '');
    const results: FoundItem[] = [];

    equipment.forEach(item => {
      const normalizedInventory = item.inventoryNumber.replace(/^0+/, '');
      const normalizedSerial = (item.serialNumber || '').replace(/^0+/, '');

      if (
        normalizedInventory.includes(normalizedSearch) ||
        normalizedSerial.includes(normalizedSearch)
      ) {
        results.push({
          id: item.id,
          inventoryNumber: item.inventoryNumber,
          name: item.name,
          type: item.type,
          department: item.department,
          status: item.status,
          location: item.location,
          user: item.user,
          comment: item.comment,
          serialNumber: item.serialNumber,
        });
      }
    });

    return results;
  }, [equipment]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: addSerial
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
   * 2. –ü—Ä–∏ –æ–¥–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
   * 3. –î—É–±–ª–∏–∫–∞—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ —Ç–æ–≥–æ –∂–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const addSerial = useCallback((searchTerm: string) => {
    if (!searchTerm.trim()) return;

    const found = searchEquipmentByNumbers(searchTerm);

    if (found.length === 0) {
      // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'not_found',
      };
      setRows(prev => [...prev, newRow]);
      setInputValue('');
    } else if (found.length === 1) {
      // –ù–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const item = found[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const isDuplicate = rows.some(row => 
        row.item && row.item.inventoryNumber === item.inventoryNumber
      );

      if (isDuplicate) {
        // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç
        const newRow: BufferRow = {
          id: Date.now().toString(),
          serial: searchTerm,
          status: 'duplicate',
          item: item,
        };
        setRows(prev => [...prev, newRow]);
        setInputValue('');
      } else {
        // –≠—Ç–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        const newRow: BufferRow = {
          id: Date.now().toString(),
          serial: searchTerm,
          status: 'found',
          item: item,
        };
        setRows(prev => [...prev, newRow]);
        setInputValue('');

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
        addAction({
          type: 'import',
          description: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é: ${item.name} (${item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: item.inventoryNumber,
          oldData: null,
          newData: item,
          canUndo: true,
        });
      }
      } else {
      // –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
      setSelectionDialog({
        open: true,
        items: found,
        searchTerm: searchTerm,
      });
    }
  }, [searchEquipmentByNumbers, rows, addAction]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: handleSelectEquipment
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ —Ç–µ–∫—É—â–µ–º –±—É—Ñ–µ—Ä–µ
   * 2. –ü—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–∫ 'duplicate', –∏–Ω–∞—á–µ –∫–∞–∫ 'found'
   * 3. –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const handleSelectEquipment = useCallback((selectedItem: FoundItem, searchTerm: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const isDuplicate = rows.some(row => 
      row.item && row.item.inventoryNumber === selectedItem.inventoryNumber
    );

    if (isDuplicate) {
      // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'duplicate',
        item: selectedItem,
      };
      setRows(prev => [...prev, newRow]);
    } else {
      // –≠—Ç–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'found',
        item: selectedItem,
      };
      setRows(prev => [...prev, newRow]);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      addAction({
        type: 'import',
        description: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é: ${selectedItem.name} (${selectedItem.inventoryNumber})`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: selectedItem.inventoryNumber,
        oldData: null,
        newData: selectedItem,
        canUndo: true,
      });
    }

    setSelectionDialog({ open: false, items: [], searchTerm: '' });
    setInputValue('');
  }, [rows, addAction]);

  const removeRow = useCallback((id: string) => {
    const rowToRemove = rows.find(row => row.id === id);
    if (rowToRemove && rowToRemove.item) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
      addAction({
        type: 'delete',
        description: `–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: ${rowToRemove.item.name} (${rowToRemove.item.inventoryNumber})`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: rowToRemove.item.inventoryNumber,
        oldData: rowToRemove.item,
        newData: null,
        canUndo: true,
      });
    }

    setRows(prev => prev.filter(row => row.id !== id));
  }, [rows, addAction]);

  const clearBufferData = useCallback(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥ –¥–ª—è –≤—Å–µ—Ö —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    rows.forEach(row => {
      if (row.item) {
        addAction({
          type: 'delete',
          description: `–û—á–∏—â–µ–Ω –±—É—Ñ–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: ${row.item.name} (${row.item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: row.item.inventoryNumber,
          oldData: row.item,
          newData: null,
          canUndo: true,
        });
      }
    });

    setRows([]);
    clearInventoryBuffer();
  }, [rows, addAction]);

  const removeNonGreenData = useCallback(() => {
    const rowsToRemove = rows.filter(row => row.status !== 'found');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–æ–≥ –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    rowsToRemove.forEach(row => {
      if (row.item) {
        addAction({
          type: 'delete',
          description: `–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): ${row.item.name} (${row.item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: row.item.inventoryNumber,
          oldData: row.item,
          newData: null,
          canUndo: true,
        });
      }
    });

    setRows(prev => prev.filter(row => row.status === 'found'));
  }, [rows, addAction]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    addSerial(inputValue);
  };

  const doExport = useCallback(() => {
    const data = rows
      .filter(row => row.item)
      .map(row => ({
        '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä': row.item!.inventoryNumber,
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': row.item!.name,
        '–¢–∏–ø': row.item!.type,
        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': row.item!.department,
        '–°—Ç–∞—Ç—É—Å': row.item!.status,
        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': row.item!.location || '',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': row.item!.user || '',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': row.item!.comment || '',
      }));

    if (data.length === 0) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    const csvContent = [
      Object.keys(data[0]).join(','),
      ...data.map(row => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `inventory_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    addAction({
      type: 'export',
      description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è (${data.length} –ø–æ–∑–∏—Ü–∏–π)`,
      entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
      entityId: 'bulk_export',
      oldData: null,
      newData: { count: data.length },
      canUndo: false,
    });
  }, [rows, addAction]);

  const getFoundEquipment = useCallback(() => {
    return rows
      .filter(row => row.item && row.status === 'found') // Only include 'found' items
      .map(row => ({
        id: row.item!.id,
        inventoryNumber: row.item!.inventoryNumber,
        name: row.item!.name,
        type: row.item!.type,
        department: row.item!.department,
        status: row.item!.status,
        location: row.item!.location,
        user: row.item!.user,
        comment: row.item!.comment,
        serialNumber: row.item!.serialNumber,
        manufacturer: row.item!.manufacturer,
        model: row.item!.model,
        purchaseDate: row.item!.purchaseDate,
        cost: row.item!.cost,
        warrantyMonths: row.item!.warrantyMonths,
        supplier: row.item!.supplier,
        project: row.item!.project,
        invoiceNumber: row.item!.invoiceNumber,
        contractNumber: row.item!.contractNumber,
        rack: row.item!.rack,
      }));
  }, [rows]);

  const getAvailableOptions = useCallback(() => ({
    statuses: statuses.map((s: any) => s.name),
    locations: entities.locations?.map((l: any) => l.fullPath) || [],
    types: entities.types?.map((t: any) => t.name) || [],
    users: entities.users?.map((u: any) => u.name) || [],
  }), [statuses, entities]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: handleBulkOperation
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ equipmentStorage (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
   * 2. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
   * 3. –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const handleBulkOperation = useCallback(async (operation: any) => {
    const foundEquipment = getFoundEquipment();

    if (foundEquipment.length === 0) {
      alert('–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      return;
    }

    const updates: any = {};

    if (operation.type === 'status' && operation.value) {
      updates.status = operation.value;
    } else if (operation.type === 'location' && operation.value) {
      updates.location = operation.value;
    } else if (operation.type === 'comment' && operation.value) {
      updates.comment = operation.value;
    } else if (operation.type === 'assign' && operation.value) {
      updates.user = operation.value;
    } else if (operation.type === 'department' && operation.value) {
      updates.department = operation.value;
    } else if (operation.type === 'type' && operation.value) {
      updates.type = operation.value;
    } else if (operation.type === 'manufacturer' && operation.value) {
      updates.manufacturer = operation.value;
    } else if (operation.type === 'model' && operation.value) {
      updates.model = operation.value;
    } else if (operation.type === 'supplier' && operation.value) {
      updates.supplier = operation.value;
    } else if (operation.type === 'project' && operation.value) {
      updates.project = operation.value;
    } else if (operation.type === 'rack' && operation.value) {
      updates.rack = operation.value;
    } else if (operation.type === 'clear' && operation.value) {
      const fieldsToClear = JSON.parse(operation.value);
      fieldsToClear.forEach((field: string) => {
        updates[field] = '';
      });
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ equipmentStorage
      const { updateEquipmentByInventoryNumber } = require('../storage/equipmentStorage');
      
      foundEquipment.forEach(equipment => {
        updateEquipmentByInventoryNumber(equipment.inventoryNumber, updates);
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ
      const updatedRows = rows.map(row => {
        if (row.item) {
          return {
            ...row,
            item: {
              ...row.item,
              ...updates,
            },
          };
        }
        return row;
      });

      setRows(updatedRows);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
      addAction({
        type: 'bulk',
        description: `–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${operation.type} –¥–ª—è ${foundEquipment.length} –ø–æ–∑–∏—Ü–∏–π`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: 'bulk_operation',
        oldData: { count: foundEquipment.length, operation: 'bulk_update' },
        newData: { count: foundEquipment.length, operation: 'bulk_update', updates },
        canUndo: true,
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (window.notificationSystem) {
        window.notificationSystem.addNotification({
          type: 'success',
          title: '–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
          message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${foundEquipment.length} –ø–æ–∑–∏—Ü–∏–π`,
        });
      }

      setBulkOperationsOpen(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏:', error);
      
      if (window.notificationSystem) {
        window.notificationSystem.addNotification({
          type: 'error',
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        });
      }
    }
  }, [rows, getFoundEquipment, addAction]);

  const showBarcode = useCallback((inventoryNumber: string) => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>–®—Ç—Ä–∏—Ö-–∫–æ–¥</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              text-align: center;
            }
            .barcode-container {
              margin: 20px 0;
            }
            .inventory-number {
              font-size: 18px;
              font-weight: bold;
              margin-top: 10px;
            }
            .print-button {
              background: #007bff;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              cursor: pointer;
              margin: 20px;
            }
            .print-button:hover {
              background: #0056b3;
            }
          </style>
        </head>
        <body>
          <h2>–®—Ç—Ä–∏—Ö-–∫–æ–¥</h2>
          <div class="barcode-container">
            <svg id="barcode"></svg>
          </div>
          <div class="inventory-number">${inventoryNumber}</div>
          <button class="print-button" onclick="window.print()">–ü–µ—á–∞—Ç—å</button>
          <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
          <script>
            JsBarcode("#barcode", "${inventoryNumber}", {
              format: "CODE128",
              width: 2,
              height: 60,
              displayValue: false,
              margin: 10
            });
          </script>
        </body>
        </html>
      `);
      printWindow.document.close();
    }
  }, []);

  // useEffect –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–º–µ–Ω—ã –≤ ActionLogContext
  useEffect(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    registerUndoHandler('–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', (action: any) => {
      try {
        switch (action.type) {
          case 'import':
            // –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ - —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
            if (action.newData && action.newData.inventoryNumber) {
              setRows(prev => prev.filter(row => 
                !row.item || row.item.inventoryNumber !== action.newData.inventoryNumber
              ));
              return true; // –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
            }
            break;
            
          case 'delete':
            // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –±—É—Ñ–µ—Ä–µ
            if (action.oldData) {
              const newRow: BufferRow = {
                id: Date.now().toString(),
                serial: action.oldData.inventoryNumber,
                status: 'found',
                item: action.oldData,
              };
              setRows(prev => [...prev, newRow]);
              return true; // –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
            }
            break;
        }
        return false; // –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:', error);
        return false;
      }
    });

    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      unregisterUndoHandler('–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è');
    };
  }, [registerUndoHandler, unregisterUndoHandler]);

  return (
    <Box sx={{ p: 3, minHeight: '100vh', backgroundColor: 'background.default' }}>
      {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          borderRadius: 3,
          background: 'linear-gradient(135deg, rgba(25, 118, 210, 0.05), rgba(66, 165, 245, 0.05))',
          border: '1px solid',
          borderColor: 'divider',
          backdropFilter: 'blur(10px)'
        }}
      >
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <Typography variant="h6" sx={{ mb: 1, fontWeight: 600 }}>
            –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
      </Typography>
          <form onSubmit={handleSubmit} style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
        <TextField
              fullWidth
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤. –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              size="medium"
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 2,
                  '&:hover': {
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: 'primary.main',
                    }
                  },
                  '&.Mui-focused': {
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: 'primary.main',
                      borderWidth: 2
                    }
                  }
                }
              }}
            />
            <Button
              type="submit"
              variant="contained"
              startIcon={<AddIcon />}
              size="large"
              sx={{
                borderRadius: 2,
                px: 4,
                py: 1.5,
                background: 'linear-gradient(45deg, #1976d2, #42a5f5)',
                boxShadow: '0 4px 15px rgba(25, 118, 210, 0.3)',
                '&:hover': {
                  background: 'linear-gradient(45deg, #1565c0, #1976d2)',
                  boxShadow: '0 6px 20px rgba(25, 118, 210, 0.4)',
                  transform: 'translateY(-1px)'
                },
                transition: 'all 0.3s ease'
              }}
            >
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </form>
        </Box>
      </Paper>

      {/* –ë—É—Ñ–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ */}
      <Paper 
        elevation={2}
        sx={{ 
          borderRadius: 3,
          overflow: 'hidden',
          border: '1px solid',
          borderColor: 'divider'
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É—Ñ–µ—Ä–∞ */}
        <Box sx={{ 
          p: 3, 
          borderBottom: '1px solid', 
          borderColor: 'divider',
          background: 'linear-gradient(135deg, rgba(25, 118, 210, 0.08), rgba(66, 165, 245, 0.08))'
        }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h5" sx={{ fontWeight: 600 }}>
              –ë—É—Ñ–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
                </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Button
                variant="outlined"
                startIcon={<ViewColumnIcon />}
                onClick={() => setColumnsDialogOpen(true)}
                size="small"
                sx={{ borderRadius: 2 }}
              >
                –ö–æ–ª–æ–Ω–∫–∏
              </Button>
              <Button
                variant="outlined"
                startIcon={<ActionsIcon />}
                onClick={() => setBulkOperationsOpen(true)}
                size="small"
                sx={{ borderRadius: 2 }}
              >
                –î–µ–π—Å—Ç–≤–∏—è
              </Button>

              <Button
                variant="outlined"
                startIcon={<ExportIcon />}
                onClick={doExport}
                size="small"
                sx={{ borderRadius: 2 }}
              >
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
              <Button
                variant="outlined"
                startIcon={<ClearIcon />}
                onClick={removeNonGreenData}
                size="small"
                sx={{ borderRadius: 2 }}
              >
                –£–±—Ä–∞—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
              </Button>
              <Button
                variant="outlined"
                color="error"
                startIcon={<ClearIcon />}
                onClick={clearBufferData}
                size="small"
                sx={{ borderRadius: 2 }}
              >
                –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä
              </Button>
            </Box>
          </Box>
          
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Box sx={{ 
                width: 16, 
                height: 16, 
                borderRadius: '3px 0 0 3px',
                background: 'linear-gradient(180deg, #4caf50 0%, rgba(76, 175, 80, 0.3) 100%)',
                border: '1px solid #4caf50'
              }} />
                  <Typography variant="body2" color="text.secondary">
                –ù–∞–π–¥–µ–Ω–æ: {rows.filter(r => r.status === 'found').length}
                  </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Box sx={{ 
                width: 16, 
                height: 16, 
                borderRadius: '3px 0 0 3px',
                background: 'linear-gradient(180deg, #9e9e9e 0%, rgba(158, 158, 158, 0.3) 100%)',
                border: '1px solid #9e9e9e'
              }} />
              <Typography variant="body2" color="text.secondary">
                –î—É–±–ª–∏–∫–∞—Ç—ã: {rows.filter(r => r.status === 'duplicate').length}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Box sx={{ 
                width: 16, 
                height: 16, 
                borderRadius: '3px 0 0 3px',
                background: 'linear-gradient(180deg, #f44336 0%, rgba(244, 67, 54, 0.3) 100%)',
                border: '1px solid #f44336'
              }} />
              <Typography variant="body2" color="text.secondary">
                –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {rows.filter(r => r.status === 'not_found').length}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" color="text.secondary" sx={{ fontWeight: 500 }}>
                –í—Å–µ–≥–æ: {rows.length}
              </Typography>
            </Box>
          </Box>
        </Box>

        {/* –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
        <Box sx={{ p: 2 }}>
          {rows.length === 0 ? (
            <Box sx={{ 
              textAlign: 'center', 
              py: 8,
              color: 'text.secondary'
            }}>
              <Typography variant="h6" sx={{ mb: 1 }}>
                –ë—É—Ñ–µ—Ä –ø—É—Å—Ç
              </Typography>
              <Typography variant="body2">
                –î–æ–±–∞–≤—å—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
              </Typography>
            </Box>
          ) : (
            <TableContainer>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    {orderedVisibleColumns.map((key: string, index: number) => (
                      <TableCell
                        key={key}
                        sx={{ 
                          fontWeight: 600
                        }}
                      >
                        {key === 'inventoryNumber' ? '–ò–Ω–≤. –Ω–æ–º–µ—Ä' :
                         key === 'department' ? '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç' :
                         key === 'name' ? '–ù–∞–∑–≤–∞–Ω–∏–µ' :
                         key === 'status' ? '–°—Ç–∞—Ç—É—Å' :
                         key === 'location' ? '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' :
                         key === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' :
                         key === 'type' ? '–¢–∏–ø' :
                         key === 'manufacturer' ? '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å' :
                         key === 'model' ? '–ú–æ–¥–µ–ª—å' :
                         key === 'serialNumber' ? '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä' :
                         key === 'comment' ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : key}
                      </TableCell>
                    ))}
                    <TableCell sx={{ fontWeight: 600 }}>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {rows.map((row) => (
                    <TableRow 
                      key={row.id} 
                      hover
                      sx={{
                        backgroundColor: row.status === 'found' 
                          ? 'rgba(76, 175, 80, 0.25)' // –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                          : row.status === 'duplicate' 
                            ? 'rgba(158, 158, 158, 0.25)' // –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Å–µ—Ä—ã–π –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            : 'rgba(244, 67, 54, 0.25)', // –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                        transition: 'all 0.2s ease',
                        position: 'relative',
                        height: '48px',
                        '&:hover': {
                          backgroundColor: row.status === 'found' 
                            ? 'rgba(76, 175, 80, 0.35)' // –ï—â–µ —Ç–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                            : row.status === 'duplicate' 
                              ? 'rgba(158, 158, 158, 0.35)'
                              : 'rgba(244, 67, 54, 0.35)'
                        },
                        // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                        borderLeft: row.status === 'found' 
                          ? '3px solid #4caf50'
                          : row.status === 'duplicate' 
                            ? '3px solid #9e9e9e'
                            : '3px solid #f44336'
                      }}
                    >
                      
                      {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ */}
                      {orderedVisibleColumns.map((key: string) => (
                        <TableCell key={key} sx={{ py: 1 }}>
                          {key === 'inventoryNumber' && row.item ? (
                            <Typography variant="body2" sx={{ fontWeight: 700, color: 'text.primary' }}>
                              {row.item.inventoryNumber}
                            </Typography>
                          ) : key === 'inventoryNumber' && !row.item ? (
                            <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
                              {row.serial}
                            </Typography>
                          ) : key === 'department' && row.item ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.department}
                            </Typography>
                          ) : key === 'department' && !row.item ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'name' && row.item ? (
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      color: 'primary.main',
                                cursor: 'pointer',
                      textDecoration: 'underline',
                                fontWeight: 500,
                                '&:hover': { 
                                  color: 'primary.dark',
                                  textDecoration: 'none'
                                }
                              }}
                              onClick={() => navigate(`/equipment/${row.item!.inventoryNumber}`)}
                            >
                              {row.item.name}
                  </Typography>
                          ) : key === 'name' && !row.item ? (
                            <Typography variant="body2" color="text.secondary">–ù–µ –Ω–∞–π–¥–µ–Ω–æ</Typography>
                          ) : key === 'status' && row.item ? (
                            <Chip
                              label={row.item.status}
                              size="small"
                              color={getStatusColor(row.item.status) as any}
                              sx={{ 
                                fontSize: '0.75rem',
                                height: '20px' // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —á–∏–ø–∞
                              }}
                            />
                          ) : key === 'status' && !row.item ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'location' && row.item?.location ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.location}
                            </Typography>
                          ) : key === 'location' && (!row.item || !row.item.location) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'user' && row.item?.user ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.user}
                            </Typography>
                          ) : key === 'user' && (!row.item || !row.item.user) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'type' && row.item?.type ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.type}
                            </Typography>
                          ) : key === 'type' && (!row.item || !row.item.type) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'manufacturer' && row.item?.manufacturer ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.manufacturer}
                            </Typography>
                          ) : key === 'manufacturer' && (!row.item || !row.item.manufacturer) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'model' && row.item?.model ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.model}
                            </Typography>
                          ) : key === 'model' && (!row.item || !row.item.model) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'serialNumber' && row.item?.serialNumber ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.serialNumber}
                            </Typography>
                          ) : key === 'serialNumber' && (!row.item || !row.item.serialNumber) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : key === 'comment' && row.item?.comment ? (
                            <Typography variant="body2" color="text.primary">
                              {row.item.comment}
                            </Typography>
                          ) : key === 'comment' && (!row.item || !row.item.comment) ? (
                            <Typography variant="body2" color="text.secondary">-</Typography>
                          ) : null}
                        </TableCell>
                      ))}
                      <TableCell sx={{ py: 1 }}>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          {row.status === 'found' && row.item && (
                  <IconButton
                    size="small"
                              onClick={() => showBarcode(row.item!.inventoryNumber)}
                              sx={{ 
                                color: 'primary.main',
                                backgroundColor: 'primary.light',
                                '&:hover': { 
                                  backgroundColor: 'primary.main',
                                  color: 'white'
                                },
                                transition: 'all 0.2s ease'
                              }}
                            >
                              <QrCodeIcon fontSize="small" />
                  </IconButton>
                )}
                <IconButton 
                  size="small"
                            onClick={() => removeRow(row.id)}
                            sx={{ 
                              color: 'error.main',
                              backgroundColor: 'error.light',
                              '&:hover': { 
                                backgroundColor: 'error.main',
                                color: 'white'
                              },
                              transition: 'all 0.2s ease'
                            }}
                          >
                            <DeleteIcon fontSize="small" />
                </IconButton>
              </Box>
                      </TableCell>
                    </TableRow>
          ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Box>
      </Paper>

      {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
      {selectionDialog.open && (
        <Dialog
          open={selectionDialog.open}
          onClose={() => setSelectionDialog({ ...selectionDialog, open: false })}
          maxWidth="sm"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 3,
              overflow: 'hidden'
            }
          }}
        >
          <DialogTitle sx={{ 
            background: 'linear-gradient(135deg, #1976d2, #42a5f5)',
            color: 'white',
            fontWeight: 600
          }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
          </DialogTitle>
          <DialogContent sx={{ p: 0 }}>
            <List sx={{ p: 0 }}>
              {selectionDialog.items.map((item) => (
                <ListItem 
                  key={item.id}
                  disablePadding
                  sx={{
                    cursor: 'pointer',
                    '&:hover': {
                      backgroundColor: 'action.hover'
                    }
                  }}
                >
                  <ListItemButton 
                    onClick={() => handleSelectEquipment(item, selectionDialog.searchTerm)}
                    sx={{ px: 3, py: 2 }}
                  >
                    <ListItemText 
                      primary={`${item.inventoryNumber} - ${item.name}`}
                      secondary={`–¢–∏–ø: ${item.type}, –°—Ç–∞—Ç—É—Å: ${item.status}`}
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
        </DialogContent>
          <DialogActions sx={{ p: 3, pt: 0 }}>
            <Button 
              onClick={() => setSelectionDialog({ ...selectionDialog, open: false })}
              variant="contained"
              sx={{ borderRadius: 2, px: 3 }}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
        </DialogActions>
      </Dialog>
      )}

      {/* –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <BulkOperations
        open={bulkOperationsOpen}
        onClose={() => setBulkOperationsOpen(false)}
        selectedItems={getFoundEquipment()}
        onBulkOperation={handleBulkOperation}
        availableStatuses={getAvailableOptions().statuses}
        availableLocations={getAvailableOptions().locations}
        availableTypes={getAvailableOptions().types}
        availableUsers={getAvailableOptions().users}
        availableDepartments={entities?.departments?.map((d: any) => d.name) || []}
        availableSuppliers={entities?.suppliers?.map((s: any) => s.name) || []}
        availableProjects={entities?.projects?.map((p: any) => p.name) || []}
        availableShelves={entities?.shelves?.map((s: any) => s.name) || []}
      />

      {/* –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
      <Dialog
        open={columnsDialogOpen}
        onClose={() => setColumnsDialogOpen(false)}
        maxWidth="xs"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            overflow: 'hidden'
          }
        }}
      >
        <DialogTitle sx={{ 
          background: 'linear-gradient(135deg, #1976d2, #42a5f5)',
          color: 'white',
          fontWeight: 600
        }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        </DialogTitle>
        <DialogContent sx={{ p: 0 }}>
          <List sx={{ p: 0 }}>
            {columnOrder.map((key: string) => (
              <ListItem 
                key={key} 
                disablePadding
                sx={{
                  cursor: 'grab',
                  '&:active': { cursor: 'grabbing' },
                  opacity: isDragging && draggedColumn === key ? 0.5 : 1,
                  transition: 'opacity 0.2s'
                }}
                draggable={true}
                onDragStart={(e) => handleDragStart(e, key)}
                onDragOver={handleDragOver}
                onDrop={(e) => handleDrop(e, key)}
                onDragEnd={handleDragEnd}
              >
                <ListItemButton 
                  onClick={() => handleColumnVisibilityChange(key, !visibleColumns[key as keyof typeof visibleColumns])}
                  sx={{ px: 3, py: 2 }}
                >
                  <ListItemIcon>
                    <Checkbox 
                      edge="start" 
                      checked={visibleColumns[key as keyof typeof visibleColumns]} 
                      tabIndex={-1}
                      disableRipple
                    />
                  </ListItemIcon>
                  <ListItemText 
                    primary={
                      key === 'inventoryNumber' ? '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä' :
                      key === 'department' ? '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç' :
                      key === 'name' ? '–ù–∞–∑–≤–∞–Ω–∏–µ' :
                      key === 'status' ? '–°—Ç–∞—Ç—É—Å' :
                      key === 'location' ? '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' :
                      key === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' :
                      key === 'type' ? '–¢–∏–ø' :
                      key === 'manufacturer' ? '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å' :
                      key === 'model' ? '–ú–æ–¥–µ–ª—å' :
                      key === 'serialNumber' ? '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä' :
                      key === 'comment' ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : key
                    }
                  />
                  <Box sx={{ display: 'flex', alignItems: 'center', ml: 1 }}>
                    <ViewColumnIcon 
                      sx={{ 
                        color: 'text.secondary', 
                        cursor: 'grab',
                        '&:active': { cursor: 'grabbing' }
                      }} 
                    />
                  </Box>
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 0 }}>
          <Button 
            onClick={() => setColumnsDialogOpen(false)}
            variant="contained"
            sx={{ borderRadius: 2, px: 3 }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Inventory;


