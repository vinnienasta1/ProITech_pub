/**
 * üö® –í–ê–ñ–ù–û: –õ–û–ì–ò–ö–ê –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–ò - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ë–ï–ó –¢–©–ê–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
 * 1. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–≤–æ–¥–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
 * 2. –î—É–±–ª–∏–∫–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * 3. –ë—É—Ñ–µ—Ä –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 * 4. –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –ò –±—É—Ñ–µ—Ä, –ò –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ equipmentStorage
 * 
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•:
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ë–ï–ó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø):
 * - addSerial: –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * - handleSelectEquipment: –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
 * - handleBulkOperation: –ª–æ–≥–∏–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - searchEquipmentByNumbers: –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * - useEffect –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞
 * 
 * –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –õ–Æ–ë–û–ô –ò–ó –≠–¢–ò–• –§–£–ù–ö–¶–ò–ô –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
 * 1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã
 * 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
 * 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * 5. –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Typography, 
  Paper, 
  TextField, 
  Button, 
  Card,
  CardContent,
  IconButton,
  Chip, 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions, 
  List,
  ListItem,
  ListItemText,
  ListItemButton,
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  QrCode as QrCodeIcon,
  Clear as ClearIcon,
  FileDownload as ExportIcon,
  Settings as ActionsIcon,
} from '@mui/icons-material';
import { getEquipment } from '../storage/equipmentStorage';
import { getEntities } from '../storage/entitiesStorage';
import { getStatuses } from '../storage/statusStorage';
import { getInventoryBuffer, clearInventoryBuffer, saveInventoryBuffer } from '../storage/inventoryBufferStorage';
import BulkOperations from '../components/BulkOperations';
import { useActionLog } from '../contexts/ActionLogContext';

interface FoundItem {
  id: string;
  inventoryNumber: string;
  name: string;
  type: string;
  department: string;
  status: string;
  location?: string;
  user?: string;
  comment?: string;
  serialNumber?: string;
}

interface BufferRow {
  id: string;
  serial: string;
  status: 'found' | 'not_found' | 'duplicate';
  item?: FoundItem;
}

const Inventory: React.FC = () => {
  const navigate = useNavigate();
  const { addAction } = useActionLog();
  
  const [inputValue, setInputValue] = useState('');
  const [rows, setRows] = useState<BufferRow[]>([]);
  const [selectionDialog, setSelectionDialog] = useState<{
    open: boolean;
    items: FoundItem[];
    searchTerm: string;
  }>({
    open: false,
    items: [],
    searchTerm: '',
  });
  const [bulkOperationsOpen, setBulkOperationsOpen] = useState(false);

  const equipment = getEquipment();
  const entities = getEntities();
  const statuses = getStatuses();

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô useEffect: –ó–∞–≥—Ä—É–∑–∫–∞ –±—É—Ñ–µ—Ä–∞
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   * 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
   * 3. –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏!
   */
  useEffect(() => {
    const bufferData = getInventoryBuffer();
    if (bufferData.length > 0) {
      setRows(bufferData);
    }
  }, []);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô useEffect: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –±—É—Ñ–µ—Ä –≤ localStorage –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   * 2. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
   * 3. –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!
   */
  useEffect(() => {
    if (rows.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ localStorage
      saveInventoryBuffer(rows);
    }
  }, [rows]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: searchEquipmentByNumbers
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ò—â–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
   * 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫ (—É–±–∏—Ä–∞–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
   * 3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –≤—ã–±–æ—Ä–∞
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ü–û–ò–°–ö–ê –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const searchEquipmentByNumbers = useCallback((searchTerm: string): FoundItem[] => {
    if (!searchTerm.trim()) return [];

    const normalizedSearch = searchTerm.replace(/^0+/, '');
    const results: FoundItem[] = [];

    equipment.forEach(item => {
      const normalizedInventory = item.inventoryNumber.replace(/^0+/, '');
      const normalizedSerial = (item.serialNumber || '').replace(/^0+/, '');

      if (
        normalizedInventory.includes(normalizedSearch) ||
        normalizedSerial.includes(normalizedSearch)
      ) {
        results.push({
          id: item.id,
          inventoryNumber: item.inventoryNumber,
          name: item.name,
          type: item.type,
          department: item.department,
          status: item.status,
          location: item.location,
          user: item.user,
          comment: item.comment,
          serialNumber: item.serialNumber,
        });
      }
    });

    return results;
  }, [equipment]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: addSerial
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
   * 2. –ü—Ä–∏ –æ–¥–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
   * 3. –î—É–±–ª–∏–∫–∞—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ —Ç–æ–≥–æ –∂–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const addSerial = useCallback((searchTerm: string) => {
    if (!searchTerm.trim()) return;

    const found = searchEquipmentByNumbers(searchTerm);

    if (found.length === 0) {
      // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'not_found',
      };
      setRows(prev => [...prev, newRow]);
      setInputValue('');
    } else if (found.length === 1) {
      // –ù–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const item = found[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const isDuplicate = rows.some(row => 
        row.item && row.item.inventoryNumber === item.inventoryNumber
      );

      if (isDuplicate) {
        // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç
        const newRow: BufferRow = {
          id: Date.now().toString(),
          serial: searchTerm,
          status: 'duplicate',
          item: item,
        };
        setRows(prev => [...prev, newRow]);
        setInputValue('');
      } else {
        // –≠—Ç–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        const newRow: BufferRow = {
          id: Date.now().toString(),
          serial: searchTerm,
          status: 'found',
          item: item,
        };
        setRows(prev => [...prev, newRow]);
        setInputValue('');

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
        addAction({
          type: 'import',
          description: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é: ${item.name} (${item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: item.inventoryNumber,
          oldData: null,
          newData: item,
          canUndo: true,
        });
      }
    } else {
      // –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
      setSelectionDialog({
        open: true,
        items: found,
        searchTerm: searchTerm,
      });
    }
  }, [searchEquipmentByNumbers, rows, addAction]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: handleSelectEquipment
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ —Ç–µ–∫—É—â–µ–º –±—É—Ñ–µ—Ä–µ
   * 2. –ü—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–∫ 'duplicate', –∏–Ω–∞—á–µ –∫–∞–∫ 'found'
   * 3. –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const handleSelectEquipment = useCallback((selectedItem: FoundItem, searchTerm: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const isDuplicate = rows.some(row => 
      row.item && row.item.inventoryNumber === selectedItem.inventoryNumber
    );

    if (isDuplicate) {
      // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'duplicate',
        item: selectedItem,
      };
      setRows(prev => [...prev, newRow]);
    } else {
      // –≠—Ç–æ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
      const newRow: BufferRow = {
        id: Date.now().toString(),
        serial: searchTerm,
        status: 'found',
        item: selectedItem,
      };
      setRows(prev => [...prev, newRow]);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      addAction({
        type: 'import',
        description: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é: ${selectedItem.name} (${selectedItem.inventoryNumber})`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: selectedItem.inventoryNumber,
        oldData: null,
        newData: selectedItem,
        canUndo: true,
      });
    }

    setSelectionDialog({ open: false, items: [], searchTerm: '' });
    setInputValue('');
  }, [rows, addAction]);

  const removeRow = useCallback((id: string) => {
    const rowToRemove = rows.find(row => row.id === id);
    if (rowToRemove && rowToRemove.item) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
      addAction({
        type: 'delete',
        description: `–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: ${rowToRemove.item.name} (${rowToRemove.item.inventoryNumber})`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: rowToRemove.item.inventoryNumber,
        oldData: rowToRemove.item,
        newData: null,
        canUndo: true,
      });
    }

    setRows(prev => prev.filter(row => row.id !== id));
  }, [rows, addAction]);

  const clearBufferData = useCallback(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥ –¥–ª—è –≤—Å–µ—Ö —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    rows.forEach(row => {
      if (row.item) {
        addAction({
          type: 'delete',
          description: `–û—á–∏—â–µ–Ω –±—É—Ñ–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: ${row.item.name} (${row.item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: row.item.inventoryNumber,
          oldData: row.item,
          newData: null,
          canUndo: true,
        });
      }
    });

    setRows([]);
    clearInventoryBuffer();
  }, [rows, addAction]);

  const removeNonGreenData = useCallback(() => {
    const rowsToRemove = rows.filter(row => row.status !== 'found');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–æ–≥ –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    rowsToRemove.forEach(row => {
      if (row.item) {
        addAction({
          type: 'delete',
          description: `–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): ${row.item.name} (${row.item.inventoryNumber})`,
          entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
          entityId: row.item.inventoryNumber,
          oldData: row.item,
          newData: null,
          canUndo: true,
        });
      }
    });

    setRows(prev => prev.filter(row => row.status === 'found'));
  }, [rows, addAction]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    addSerial(inputValue);
  };

  const doExport = useCallback(() => {
    const data = rows
      .filter(row => row.item)
      .map(row => ({
        '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä': row.item!.inventoryNumber,
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': row.item!.name,
        '–¢–∏–ø': row.item!.type,
        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': row.item!.department,
        '–°—Ç–∞—Ç—É—Å': row.item!.status,
        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': row.item!.location || '',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': row.item!.user || '',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': row.item!.comment || '',
      }));

    if (data.length === 0) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    const csvContent = [
      Object.keys(data[0]).join(','),
      ...data.map(row => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `inventory_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    addAction({
      type: 'export',
      description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è (${data.length} –ø–æ–∑–∏—Ü–∏–π)`,
      entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
      entityId: 'bulk_export',
      oldData: null,
      newData: { count: data.length },
      canUndo: false,
    });
  }, [rows, addAction]);

  const getFoundEquipment = useCallback(() => {
    return rows
      .filter(row => row.item)
      .map(row => ({
        id: row.item!.id,
        inventoryNumber: row.item!.inventoryNumber,
        name: row.item!.name,
        type: row.item!.type,
        department: row.item!.department,
        status: row.item!.status,
        location: row.item!.location,
        user: row.item!.user,
        comment: row.item!.comment,
      }));
  }, [rows]);

  const getAvailableOptions = useCallback(() => ({
    statuses: statuses.map(s => s.name),
    locations: entities.locations?.map(l => l.fullPath) || [],
    types: entities.types?.map(t => t.name) || [],
    users: entities.users?.map(u => u.name) || [],
  }), [statuses, entities]);

  /**
   * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: handleBulkOperation
   * 
   * –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
   * 1. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ equipmentStorage (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
   * 2. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
   * 3. –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   * 
   * –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –õ–û–ì–ò–ö–£ –ë–ï–ó –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
   */
  const handleBulkOperation = useCallback(async (operation: any) => {
    const foundEquipment = getFoundEquipment();

    if (foundEquipment.length === 0) {
      alert('–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      return;
    }

    const updates: any = {};

    if (operation.type === 'status' && operation.value) {
      updates.status = operation.value;
    } else if (operation.type === 'location' && operation.value) {
      updates.location = operation.value;
    } else if (operation.type === 'comment' && operation.value) {
      updates.comment = operation.value;
    } else if (operation.type === 'assign' && operation.value) {
      updates.user = operation.value;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ equipmentStorage
      const { updateEquipmentByInventoryNumber } = require('../storage/equipmentStorage');
      
      foundEquipment.forEach(equipment => {
        updateEquipmentByInventoryNumber(equipment.inventoryNumber, updates);
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ
      const updatedRows = rows.map(row => {
        if (row.item) {
          return {
            ...row,
            item: {
              ...row.item,
              ...updates,
            },
          };
        }
        return row;
      });

      setRows(updatedRows);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
      addAction({
        type: 'bulk',
        description: `–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${operation.type} –¥–ª—è ${foundEquipment.length} –ø–æ–∑–∏—Ü–∏–π`,
        entityType: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        entityId: 'bulk_operation',
        oldData: { count: foundEquipment.length, operation: 'bulk_update' },
        newData: { count: foundEquipment.length, operation: 'bulk_update', updates },
        canUndo: true,
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (window.notificationSystem) {
        window.notificationSystem.addNotification({
          type: 'success',
          title: '–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
          message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${foundEquipment.length} –ø–æ–∑–∏—Ü–∏–π`,
        });
      }

      setBulkOperationsOpen(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏:', error);
      
      if (window.notificationSystem) {
        window.notificationSystem.addNotification({
          type: 'error',
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        });
      }
    }
  }, [rows, getFoundEquipment, addAction]);

  const showBarcode = useCallback((inventoryNumber: string) => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>–®—Ç—Ä–∏—Ö-–∫–æ–¥</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              text-align: center;
            }
            .barcode-container {
              margin: 20px 0;
            }
            .inventory-number {
              font-size: 18px;
              font-weight: bold;
              margin-top: 10px;
            }
            .print-button {
              background: #007bff;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              cursor: pointer;
              margin: 20px;
            }
            .print-button:hover {
              background: #0056b3;
            }
          </style>
        </head>
        <body>
          <h2>–®—Ç—Ä–∏—Ö-–∫–æ–¥</h2>
          <div class="barcode-container">
            <svg id="barcode"></svg>
          </div>
          <div class="inventory-number">${inventoryNumber}</div>
          <button class="print-button" onclick="window.print()">–ü–µ—á–∞—Ç—å</button>
          <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
          <script>
            JsBarcode("#barcode", "${inventoryNumber}", {
              format: "CODE128",
              width: 2,
              height: 60,
              displayValue: false,
              margin: 10
            });
          </script>
        </body>
        </html>
      `);
      printWindow.document.close();
    }
  }, []);

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" component="h1" sx={{ mb: 3 }}>
        –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
      </Typography>

      {/* –®–∞–ø–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, alignItems: 'center' }}>
          <Box sx={{ flex: '1 1 400px', minWidth: 0 }}>
            <form onSubmit={handleSubmit} style={{ display: 'flex', gap: 8 }}>
        <TextField
                fullWidth
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤. –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                size="small"
              />
              <Button
                type="submit"
                variant="contained"
                startIcon={<AddIcon />}
                size="small"
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </form>
          </Box>
          
          <Box sx={{ flex: '1 1 600px', minWidth: 0 }}>
            <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end', flexWrap: 'wrap' }}>
              <Button
                variant="outlined"
                startIcon={<ActionsIcon />}
                onClick={() => setBulkOperationsOpen(true)}
                size="small"
              >
                –î–µ–π—Å—Ç–≤–∏—è
              </Button>
              <Button
                variant="outlined"
                startIcon={<ExportIcon />}
                onClick={doExport}
                size="small"
              >
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
              <Button
                variant="outlined"
                startIcon={<ClearIcon />}
                onClick={removeNonGreenData}
                size="small"
              >
                –£–±—Ä–∞—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
              </Button>
              <Button
                variant="outlined"
                color="error"
                startIcon={<ClearIcon />}
                onClick={clearBufferData}
                size="small"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä
              </Button>
            </Box>
          </Box>
        </Box>
      </Paper>

      {/* –ë—É—Ñ–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ */}
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
        {rows.map((row) => (
          <Card
            key={row.id}
            sx={{
              backgroundColor: row.status === 'found' ? 'success.light' : 
                              row.status === 'duplicate' ? 'grey.300' : 'error.light',
              border: '1px solid',
              borderColor: row.status === 'found' ? 'success.main' : 
                          row.status === 'duplicate' ? 'grey.500' : 'error.main',
            }}
          >
            <CardContent sx={{ p: 1, py: 0.5, minHeight: '32px', '&:last-child': { pb: 0.5 } }}>
              <Box sx={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                gap: 1.5,
                lineHeight: 1.2
              }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, flex: 1 }}>
                  {row.status === 'found' && row.item ? (
                    <>
                      {/* –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç */}
                      <Typography 
                        component="span" 
                        sx={{ 
                          fontWeight: 'bold',
                          fontSize: '0.875rem',
                          color: 'text.primary'
                        }}
                      >
                        {row.item.inventoryNumber}
                      </Typography>
                      <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                      <Typography 
                        component="span" 
                        sx={{ 
                          fontWeight: 'bold',
                          fontSize: '0.875rem',
                          color: 'text.primary'
                        }}
                      >
                        {row.item.department}
                      </Typography>
                      <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                      
                      {/* –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ) */}
                      <Typography 
                        component="span" 
                        sx={{ 
                          color: 'primary.main',
                          fontSize: '0.875rem',
                          cursor: 'pointer',
                          textDecoration: 'underline',
                          '&:hover': { color: 'primary.dark' }
                        }}
                        onClick={() => navigate(`/equipment/${row.item!.inventoryNumber}`)}
                      >
                        {row.item.name}
                </Typography>
                
                      <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                      
                      {/* –°—Ç–∞—Ç—É—Å */}
                      <Chip
                        label={row.item.status}
                        size="small"
                        sx={{ 
                          fontSize: '0.75rem',
                          height: '20px',
                          backgroundColor: statuses.find(s => s.name === row.item!.status)?.color || 'default',
                          color: 'white'
                        }}
                      />

                      {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
                      {row.item?.location && (
                        <>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                          <Typography 
                            component="span" 
                            sx={{ 
                              color: 'text.primary',
                              fontSize: '0.875rem'
                            }}
                          >
                            {row.item.location}
                  </Typography>
                        </>
                      )}

                      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
                      {row.item?.user && (
                        <>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                          <Typography 
                            component="span" 
                            sx={{ 
                              color: 'text.primary',
                              fontSize: '0.875rem'
                            }}
                          >
                            {row.item.user}
                          </Typography>
                        </>
                      )}
                    </>
                  ) : row.status === 'duplicate' ? (
                    <>
                      <Typography 
                        component="span" 
                        sx={{ 
                          fontStyle: 'italic',
                          fontSize: '0.875rem',
                          color: 'text.secondary'
                        }}
                      >
                        –î—É–±–ª–∏–∫–∞—Ç
                      </Typography>
                      {row.item && (
                        <>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                          <Typography 
                            component="span" 
                            sx={{ 
                              fontWeight: 'bold',
                              fontSize: '0.875rem',
                              color: 'text.primary'
                            }}
                          >
                            {row.item.inventoryNumber}
                          </Typography>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                          <Typography 
                            component="span" 
                            sx={{ 
                              fontWeight: 'bold',
                              fontSize: '0.875rem',
                              color: 'text.primary'
                            }}
                          >
                            {row.item.department}
                          </Typography>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                  <Typography 
                            component="span" 
                    sx={{ 
                              color: 'primary.main',
                              fontSize: '0.875rem',
                      cursor: 'pointer',
                      textDecoration: 'underline',
                      '&:hover': { color: 'primary.dark' }
                    }}
                            onClick={() => navigate(`/equipment/${row.item!.inventoryNumber}`)}
                          >
                            {row.item.name}
                          </Typography>
                          <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>|</Typography>
                          <Chip
                            label={row.item.status}
                            size="small"
                            sx={{ 
                              fontSize: '0.75rem',
                              height: '20px',
                              backgroundColor: statuses.find(s => s.name === row.item!.status)?.color || 'default',
                              color: 'white'
                            }}
                          />
                        </>
                      )}
                    </>
                  ) : (
                    <Typography 
                      component="span" 
                      sx={{ 
                        fontSize: '0.875rem',
                        color: 'text.primary'
                      }}
                    >
                      –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {row.serial}
                  </Typography>
                )}
              </Box>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <Box sx={{ display: 'flex', gap: 0.5 }}>
                  {row.status === 'found' && row.item && (
                    <IconButton
                      size="small"
                      onClick={() => showBarcode(row.item!.inventoryNumber)}
                      sx={{ 
                        color: 'primary.main',
                        '&:hover': { backgroundColor: 'primary.light' }
                      }}
                    >
                      <QrCodeIcon fontSize="small" />
                    </IconButton>
                  )}
                  <IconButton
                    size="small"
                    onClick={() => removeRow(row.id)}
                    sx={{ 
                      color: 'error.main',
                      '&:hover': { backgroundColor: 'error.light' }
                    }}
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </Box>
              </Box>
            </CardContent>
          </Card>
          ))}
        </Box>

      {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
      <Dialog
        open={selectionDialog.open}
        onClose={() => setSelectionDialog({ open: false, items: [], searchTerm: '' })}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</DialogTitle>
        <DialogContent>
          <Typography variant="body2" sx={{ mb: 2 }}>
            –ü–æ –∑–∞–ø—Ä–æ—Å—É "{selectionDialog.searchTerm}" –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π:
          </Typography>
          <List>
            {selectionDialog.items.map((item) => (
              <ListItem key={item.id} disablePadding>
                <ListItemButton onClick={() => handleSelectEquipment(item, selectionDialog.searchTerm)}>
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {item.name}
                        </Typography>
                        <Chip
                          label={item.status}
                          size="small"
                          color={statuses.find(s => s.name === item.status)?.color as any}
                        />
                      </Box>
                    }
                    secondary={
                      <Box>
                        <Typography variant="body2" color="text.secondary">
                          –ò–Ω–≤. –Ω–æ–º–µ—Ä: {item.inventoryNumber} | –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {item.department}
                        </Typography>
                        {item.location && (
                          <Typography variant="body2" color="text.secondary">
                            –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.location}
                          </Typography>
                        )}
            </Box>
                    }
                  />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSelectionDialog({ open: false, items: [], searchTerm: '' })}>
            –û—Ç–º–µ–Ω–∞
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <BulkOperations
        open={bulkOperationsOpen}
        onClose={() => setBulkOperationsOpen(false)}
        selectedItems={getFoundEquipment()}
        onBulkOperation={handleBulkOperation}
        availableStatuses={getAvailableOptions().statuses}
        availableLocations={getAvailableOptions().locations}
        availableTypes={getAvailableOptions().types}
        availableUsers={getAvailableOptions().users}
      />
    </Box>
  );
};

export default Inventory;


